{
  "name": "NXC",
  "scopeName": "source.nxc",
  "patterns": [
    {"include": "#comments"},
    {"include": "#preprocessor"},
    {"include": "#strings"},
    {"include": "#numbers"},
    {"include": "#keywords"},
    {"include": "#types"},
    {"include": "#constants"},
    {"include": "#functions"},
    {"include": "#operators"},
    {"include": "#brackets"}
  ],
  "repository": {
    "comments": {
      "patterns": [
        {"name": "comment.line.double-slash.nxc", "match": "//.*$"},
        {"name": "comment.block.nxc", "begin": "/\\*", "end": "\\*/"}
      ]
    },
    "preprocessor": {
      "patterns": [
        {"name": "meta.preprocessor.definition.nxc", "match": "^\\s*#\\s*(define|undef|include|ifdef|ifndef|if|else|elif|endif)\\b.*$"}
      ]
    },
    "strings": {
      "patterns": [
        {"name": "string.quoted.double.nxc", "begin": "\"", "end": "\"", "patterns": [{"name": "constant.character.escape.nxc", "match": "\\\\."}]}
      ]
    },
    "numbers": {
      "patterns": [
        {"name": "constant.numeric.hex.nxc", "match": "0[xX][0-9A-Fa-f]+"},
        {"name": "constant.numeric.float.nxc", "match": "(?x)\\b((([0-9]+\\.[0-9]*)|([0-9]*\\.[0-9]+))([eE][+-]?[0-9]+)?)|([0-9]+[eE][+-]?[0-9]+)\\b"},
        {"name": "constant.numeric.decimal.nxc", "match": "\\b[0-9]+\\b"}
      ]
    },
    "keywords": {
      "patterns": [
        {"name": "keyword.control.c", "match": "\\b(task|repeat|for|while|do|if|else|return|break|continue|switch|case|default|goto)\\b"}
      ]
    },
    "types": {
      "patterns": [
        {"name": "storage.type.c", "match": "\\b(void|bool|byte|char|int|long|short|string|float|unsigned|signed|struct|mutex)\\b"},
        {"name": "storage.modifier.c", "match": "\\b(const|inline|volatile|static|extern|register)\\b"}
      ]
    },
    "constants": {
      "patterns": [
        {"name": "constant.language.c", "match": "\\b(TRUE|FALSE|NULL)\\b"},
        {"name": "constant.other.outputs.c", "match": "\\b(OUT_A|OUT_B|OUT_C|OUT_AB|OUT_AC|OUT_BC|OUT_ABC|OUT_ALL)\\b"},
        {"name": "constant.other.inputs.c", "match": "\\b(IN_1|IN_2|IN_3|IN_4)\\b"},
        {"name": "constant.other.sensor.c", "match": "\\b(SENSOR_[A-Z0-9_]+|SENSOR_TYPE_[A-Z0-9_]+|SENSOR_MODE_[A-Z0-9_]+)\\b"},
        {"name": "constant.other.nxc", "match": "\\b([A-Z][A-Z0-9_]{2,})\\b"}
      ]
    },
    "functions": {
      "patterns": [
        {"name": "support.function.c", "match": "\\b([A-Za-z_][A-Za-z0-9_]*)\\s*(?=\\()"}
      ]
    },
    "operators": {
      "patterns": [
        {"name": "keyword.operator.c", "match": "[+\\-*/%&|^~!=<>]=?|&&|\\|\\||<<|>>|::|\\?|:"}
      ]
    },
    "brackets": {
      "patterns": [
        {"name": "punctuation.section.block.c", "match": "[{}]"},
        {"name": "punctuation.section.parens.c", "match": "[()]"},
        {"name": "punctuation.section.brackets.c", "match": "[\\[\\]]"}
      ]
  }
  },
  "fileTypes": ["nxc"],
  "uuid": "a4e5c9c0-0000-4d3a-9c6e-nxc-syntax-000001"
}
